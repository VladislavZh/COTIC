from abc import ABC, abstractmethod
import torch.nn as nn
import torch
from src.utils.structures import Predictions, DownstreamPredictions


class HeadCore(nn.Module, ABC):
    """
    Abstract base class representing a head component for neural network models.
    """

    @property
    @abstractmethod
    def additive_loss_component(self) -> bool:
        """
        Indicates whether the head contributes to the overall loss.

        Returns:
        - bool: Flag indicating if the head contributes to the overall loss.
        """
        pass

    @abstractmethod
    def forward(self, embeddings: torch.Tensor, batch: tuple[torch.Tensor, ...], **kwargs) -> Predictions:
        """
        Perform computation using embeddings and batch to generate predictions.

        Args:
        - embeddings (torch.Tensor): Embeddings generated by the neural network.
        - batch (tuple[torch.Tensor, ...]): Input data_utils batch.

        Returns:
        - Predictions: Predictions from the head component.
        """
        pass


class IntensityHead(HeadCore, ABC):
    """
    HeadCore subclass representing an intensity head component.
    """
    additive_loss_component = True


class DownstreamHead(HeadCore, ABC):
    """
    HeadCore subclass representing a downstream head component.
    """
    @abstractmethod
    def forward(self, embeddings: torch.Tensor, batch: tuple[torch.Tensor, ...], **kwargs) -> DownstreamPredictions:
        """
        Perform computation to generate downstream predictions.

        Args:
        - embeddings (torch.Tensor): Embeddings generated by the neural network.
        - batch (tuple[torch.Tensor, ...]): Input data_utils batch.

        Returns:
        - DownstreamPredictions: Downstream predictions.
        """
        pass


class JoinedHead(nn.Module):
    """
    Combines an IntensityHead and a DownstreamHead.
    """

    def __init__(
        self,
        intensity_head: IntensityHead,
        downstream_head: DownstreamHead,
        **kwargs
    ) -> None:
        """
        Initialize JoinedHead.

        Args:
        - intensity_head (IntensityHead): Intensity head component.
        - downstream_head (DownstreamHead): Downstream head component.
        - kwargs (dict): Extra arguments.
        """
        super().__init__()
        self._intensity_head = intensity_head
        self._downstream_head = downstream_head
        self.extra_args = kwargs

    def forward(
        self,
        embeddings: torch.Tensor,
        batch: tuple[torch.Tensor, ...]
    ) -> tuple[Predictions, DownstreamPredictions]:
        """
        Perform computation using embeddings and batch to generate predictions.

        Args:
        - embeddings (torch.Tensor): Embeddings generated by the neural network.
        - batch (tuple[torch.Tensor, ...]): Input data_utils batch.

        Returns:
        - tuple[Predictions, DownstreamPredictions]: Predictions from the intensity head and downstream head.
        """
        return (
            self._intensity_head(embeddings, batch, **self.extra_args),
            self._downstream_head(embeddings, batch, **self.extra_args)
        )